// gametophytic self-incompatibility.slim : ^Outcome: (.*)$
//
// A test script for modeling gametophytic self-incompatibility with a modifyChild() callback
//
initialize() {
	initializeSLiMOptions(keepPedigrees=T); // necessary for pedigreeID
	source("init.slim");
    initializeTreeSeq();
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);   // neutral
	initializeMutationType("m2", 0.5, "f", -0.1);  // MCR complex
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}
1 early() {
	for (i in 0:5)
		sim.addSubpop(i, 100);
	for (i in 1:5)
		sim.subpopulations[i].setMigrationRates(i-1, 0.001);
	for (i in 0:4)
		sim.subpopulations[i].setMigrationRates(i+1, 0.1);
}
100 late() {
	target = sample(p0.genomes, 50);

	// use old mutation addition formula for backward compatibility
	mut = target[0].addNewDrawnMutation(m2, 10000);
	target[1:49].addMutations(mut);
}
100:500 late() {
	if (sim.countOfMutationsOfType(m2) == 0)
	{
		fixed = any(sim.substitutions.mutationType == m2);
		cat(ifelse(fixed, "Outcome: FIXED ", "Outcome: LOST ") + community.tick + "\n");
		outputMutationResult();
		sim.simulationFinished();
	}
}
mutationEffect(m2) {
	return 1.5 - subpop.id * 0.15;
}
100:500 modifyChild() {
	mut = sim.mutationsOfType(m2);
	if (size(mut) == 1)
	{
		hasMutOnChromosome1 = child.genome1.containsMutations(mut);
		hasMutOnChromosome2 = child.genome2.containsMutations(mut);
		if (hasMutOnChromosome1 & !hasMutOnChromosome2)
			child.genome2.addMutations(mut);
		else if (hasMutOnChromosome2 & !hasMutOnChromosome1)
			child.genome1.addMutations(mut);
	}
	return T;
}
100 early() {
	addAncestralSamples(5);
}
500 late() { 
	  outputMutationResult();
}
