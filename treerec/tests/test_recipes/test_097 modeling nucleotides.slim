// modeling nucleotides.slim : ^Weighted selection coefficient total: (.*)$

initialize() {
	initializeSLiMOptions(keepPedigrees=T); // necessary for pedigreeID
	source("init.slim");
    initializeTreeSeq();
	defineConstant("C", 100);	  // number of loci
	
	// Create our loci
	for (locus in 0:(C-1))
	{
		// Effects for the nucleotides ATGC are drawn from a normal DFE
		effects = rnorm(4, mean=0, sd=0.05);
		
		// Each locus is set up with its own mutType and geType
		mtA = initializeMutationType(locus*4 + 0, 0.5, "f", effects[0]);
		mtT = initializeMutationType(locus*4 + 1, 0.5, "f", effects[1]);
		mtG = initializeMutationType(locus*4 + 2, 0.5, "f", effects[2]);
		mtC = initializeMutationType(locus*4 + 3, 0.5, "f", effects[3]);
		mt = c(mtA, mtT, mtG, mtC);
		geType = initializeGenomicElementType(locus, mt, c(1,1,1,1));
		initializeGenomicElement(geType, locus, locus);
		
		// We do not want mutations to stack or fix
		mt.mutationStackPolicy = "l";
		mt.mutationStackGroup = -1;
		mt.convertToSubstitution = F;
		
		// Each mutation type knows the nucleotide it represents
		mtA.setValue("nucleotide", "A");
		mtT.setValue("nucleotide", "T");
		mtG.setValue("nucleotide", "G");
		mtC.setValue("nucleotide", "C");
	}
	
	initializeMutationRate(1e-6);   // includes 25% identity mutations
	initializeRecombinationRate(1e-8);
}

1 late() {
	sim.addSubpop("p1", 200);
	
	// The initial population is fixed for a single wild-type
	// nucleotide fixed at each locus in the chromosome
	geTypes = sim.chromosome.genomicElements.genomicElementType;

	if (isNULL(version()))	// backward compatibility		
	   mutTypes = apply(geTypes, "sample(applyValue.mutationTypes, 1, weights=applyValue.mutationFractions);");
	else
		mutTypes = sapply(geTypes, "sample(applyValue.mutationTypes, 1, weights=applyValue.mutationFractions);");
	
	// don't rely on vectorized addNewDrawnMutation()...
	g = p1.genomes;
	
	for (pos in 0:(C-1))
		g.addNewDrawnMutation(mutTypes[pos], pos);
	
	cat("Initial nucleotide sequence:");
	cat(" " + paste(mutTypes.getValue("nucleotide")) + "\n\n");
}

2: late() {
	// optionally, we can unique new mutations onto existing mutations
	// this runs only in 2: - it is assumed the gen. 1 setup is uniqued
	allMuts = sim.mutations;
	newMuts = allMuts[allMuts.originTick == community.tick];
	
	if (size(newMuts))
	{
		genomes = sim.subpopulations.genomes;
		
		oldMuts = allMuts[allMuts.originTick != community.tick];
		oldMutsPositions = oldMuts.position;
		
		newMutsPositions = newMuts.position;
		uniquePositions = unique(newMutsPositions, preserveOrder=F);
		overlappingMuts = (size(newMutsPositions) != size(uniquePositions));
		
		for (newMut in newMuts)
		{
			newMutLocus = newMut.position;
			newMutType = newMut.mutationType;
			oldLocus = oldMuts[oldMutsPositions == newMutLocus];
			oldMatched = oldLocus[oldLocus.mutationType == newMutType];
			
			if (size(oldMatched) == 1)
			{
				// We found a match; this nucleotide already exists, substitute
				containing = genomes[genomes.containsMutations(newMut)];
				containing.removeMutations(newMut);
				containing.addMutations(oldMatched);
			}
			else if (overlappingMuts)
			{
				// First instance; it is now the standard reference mutation
				// This only needs to be done if overlappingMuts==T because
				// only then will we see another new mut at this position.
				oldMuts = c(oldMuts, newMut);
				oldMutsPositions = c(oldMutsPositions, newMutLocus);
			}
		}
	}
}

100 early() {
	addAncestralSamples(5);
}

500 late() { 
	outputMutationResult();
	muts = sim.mutations;   // all mutations, no uniquing
	freqs = sim.mutationFrequencies(NULL, muts);
	selCoeffs = muts.selectionCoeff;
	totalSel = sum(freqs * selCoeffs);
	
	catn("Weighted selection coefficient total: " + totalSel);
}
