// A test script to check that some retained individuals are output in the TS
// uses a modified version of the standard continuous space recipe, so that
// we can check on the x,y position of individuals.

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T, dimensionality="xy");
	source("init_marked_mutations.slim");
    initializeTreeSeq(retainCoalescentOnly=F);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 9);
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.2);	
	defineConstant("K", 500); //carrying capacity for global density dependence
}

reproduction() {
	subpop.addCrossed(individual, subpop.sampleIndividuals(1)); //random mating
}

1 early() {
	sim.addSubpop("p1", 500);
	// TREE SEQUENCE TEST OUTPUT
	initializeMarks(n_marks);
}

early() {
	p1.fitnessScaling = K / p1.individualCount; //scale fitness (so that some individuals die when number of individuals is greater than K)
}

1 late() {
	// initial positions are random in ([0,1], [0,1])
	p1.individuals.x = runif(p1.individualCount);
	p1.individuals.y = runif(p1.individualCount);
}
modifyChild() {
	// draw a child position near the first parent, within bounds
	do child.x = parent1.x + rnorm(1, 0, 0.02);
	while ((child.x < 0.0) | (child.x > 1.0));
	
	do child.y = parent1.y + rnorm(1, 0, 0.02);
	while ((child.y < 0.0) | (child.y > 1.0));
	
	return T;
}

10 late() {
	// retain but do not permanently remember all the individuals in this generation
	sim.treeSeqRememberIndividuals(p1.individuals, permanent=F);
	addIndividuals(p1.individuals, "retain_even_if_unary");
}

20 late() {
	// retain but do not permanently remember all the individuals in this generation
	sim.treeSeqRememberIndividuals(p1.individuals, permanent=F);
	addIndividuals(p1.individuals, "retain_even_if_unary");
}

200 late() {
	outputIndividuals();
	outputMutationResult();
	sim.simulationFinished();
}
