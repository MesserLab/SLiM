initialize() {

	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T); // necessary for pedigreeID
	initializeSex('A');

	// TREE SEQUENCE TEST OUTPUT
	source("init.slim");
    initializeTreeSeq();

	defineConstant("K",30);  

	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.mutationStackPolicy = "l";
	initializeMutationType("m2", 0.5, "f", 0.0);
	m2.mutationStackPolicy = "s";
	initializeMutationType("m3", 0.5, "f", 0.0);
	m3.mutationStackPolicy = "f";

	initializeGenomicElementType("g1",c(m1,m2,m3),c(1.0,1.0,1.0));
	initializeGenomicElement(g1, 0, 99);
	initializeMutationRate(0.1);
	initializeRecombinationRate(0.1);
}

reproduction(NULL,"F") {
	subpop.addCrossed(individual,subpop.sampleIndividuals(1, sex="M"));
}
1 early() {
	sim.addSubpop("p1",10);
	addAncestralSamples(5);
}   

100 early() {
	addAncestralSamples(5);
}

early() {
	p1.fitnessScaling = K / p1.individualCount;
}

modifyChild() {
	// discard half of offspring arbitrarily
	return (rbinom(1, 1, 0.5) > 0);
}

200 late() {

	// TREE SEQUENCE TEST OUTPUT
	outputMutationResult();

	sim.simulationFinished();
}


