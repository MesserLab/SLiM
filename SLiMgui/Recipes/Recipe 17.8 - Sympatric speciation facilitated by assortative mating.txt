// Keywords: QTL, quantitative trait loci, phenotypic competition

initialize() {
	defineConstant("OPTIMUM", 5.0);
	defineConstant("SIGMA_K", 1.0);
	defineConstant("SIGMA_C", 0.4);
	defineConstant("SIGMA_M", 0.5);
	defineConstant("NORM", dnorm(0.0, mean=0, sd=SIGMA_C));
	
	initializeSLiMOptions(dimensionality="x");
	initializeMutationRate(1e-6);
	initializeMutationType("m1", 0.5, "f", 0.0);        // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, 1.0);   // QTL
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", c(m1, m2), c(1, 0.01));
	initializeGenomicElement(g1, 0, 1e5 - 1);
	initializeRecombinationRate(1e-8);
	
	// competition
	initializeInteractionType(1, "x", reciprocal=T, maxDistance=SIGMA_C * 3);
	i1.setInteractionFunction("n", 1.0, SIGMA_C);
	
	// mate choice
	initializeInteractionType(2, "x", reciprocal=T, maxDistance=SIGMA_M * 3);
	i2.setInteractionFunction("n", 1.0, SIGMA_M);
}
mutationEffect(m2) { return 1.0; }
1 late() {
	sim.addSubpop("p1", 500);
	p1.setSpatialBounds(c(0.0, 10.0));
}
1: late() {
	inds = sim.subpopulations.individuals;
	
	// construct phenotypes and fitness effects from QTLs
	phenotypes = inds.sumOfMutationsOfType(m2);
	inds.fitnessScaling = 1.0 + dnorm(phenotypes, OPTIMUM, SIGMA_K);
	inds.x = phenotypes;
	
	// evaluate phenotypic competition
	i1.evaluate(p1);
	competition = sapply(inds, "sum(i1.strength(applyValue));");
	effects = 1.0 - competition / size(inds);
	inds.fitnessScaling = inds.fitnessScaling * effects;
}
2: first() {
	// evaluate mate choice in preparation for reproduction
	i2.evaluate(p1);
}
mateChoice() {
	// spatial mate choice
	return i2.strength(individual);
}
1:2001 late() {
	if (sim.cycle == 1)
		cat("  cyc    mean      sd\n");
	
	if (sim.cycle % 100 == 1)
	{
		phenotypes = p1.individuals.x;
		cat(format("%5d  ", sim.cycle));
		cat(format("%6.2f  ", mean(phenotypes)));
		cat(format("%6.2f\n", sd(phenotypes)));
	}
}
